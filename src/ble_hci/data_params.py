from typing import Optional
from dataclasses import dataclass
from enum import Enum


@dataclass
class AdvParams:
    interval_min: int = 0x60
    interval_max: int = 0x60
    adv_type: int = 0x3
    own_addr_type: int = 0
    peer_addr_type: int = 0
    peer_addr: int = 0
    channel_map: int = 0x7
    filter_policy: int = 0


@dataclass
class ScanParams:
    scan_type: int = 0x1
    scan_interval: int = 0x100
    scan_window: int = 0x100
    addr_type: int = 0x0
    filter_policy: int = 0x0


class PeerAddrType(Enum):
    PUBLIC = 0
    RANDOM = 1
    PUBLIC_IDENTITY = 2
    RANDOM_IDENTITY = 3


@dataclass
class ConnParams:
    peer_addr: int
    scan_interval: int = 0x100
    scan_window: int = 0x100
    init_filter_policy: int = 0x0
    peer_addr_type: int = 0x0
    own_addr_type: int = 0x0
    conn_interval_min: int = 0x6
    conn_interval_max: int = 0x6
    max_latency: int = 0x0000
    sup_timeout: int = 0x64
    min_ce_length: int = 0x0F10
    max_ce_length: int = 0x0F10

    def __post_init__(self):
        if not 0x4 <= self.scan_interval <= 0x4000:
            raise ValueError("Scane interval must be between 0x4 - 0x4000")
        if not 0x4 <= self.scan_window <= 0x4000:
            raise ValueError("Scane window must be between 0x4 - 0x4000")

        if not self.init_filter_policy in [0, 1]:
            raise ValueError(
                f"Init filter policy must be 0x0 or 0x1 {self.init_filter_policy}"
            )

        if self.peer_addr_type not in [0, 1, 2, 3]:
            raise ValueError("Invalid peer address type")

        if self.peer_addr > 2**48 - 1:
            raise ValueError("Peer address must be representable by 6 octets")

        if self.own_addr_type not in [0, 1, 2, 3]:
            raise ValueError("Invalid peer address type")

        if not 0x6 <= self.conn_interval_max <= 0xC80:
            raise ValueError("Connection interval min must be between 0x6 - 0xC80")
    
class DataPktStats:
    """
    Data packet report generated by connection stats and test stats
    """

    def __init__(
        self,
        rx_data: int,
        rx_data_crc: int,
        rx_timeout: int,
        tx_data: int,
        err_data: int,
        rx_setup: int,
        tx_setup: int,
        rx_isr: int,
        tx_isr: int,
    ) -> None:
        self.rx_data = rx_data
        self.rx_data_crc = rx_data_crc
        self.rx_timeout = rx_timeout
        self.tx_data = tx_data
        self.err_data = err_data
        self.rx_setup = rx_setup
        self.tx_setup = tx_setup
        self.rx_isr = rx_isr
        self.tx_isr = tx_isr

    def __repr__(self):
        return str(self.__dict__)

    def per(self, peer_tx_data: Optional[int] = None):
        if peer_tx_data:
            return 100 - 100 *(self.rx_data / peer_tx_data)
        return self.rx_data / (self.rx_data + self.rx_data_crc + self.rx_timeout)

@dataclass  
class AdvPktStats:
    def __init__(
        self,
        tx_adv: int,
        rx_req: int,
        rx_req_crc: int,
        rx_req_timeout: int,
        tx_resp: int,
        err_adv: int,
        rx_setup: int,
        tx_setup: int,
        rx_isr: int,
        tx_isr: int,
        tx_chain: Optional[int] = None,
    ) -> None:
        self.tx_adv = tx_adv
        self.rx_req = rx_req
        self.rx_req_crc = rx_req_crc
        self.rx_req_timeout = rx_req_timeout
        self.tx_resp = tx_resp
        self.err_adv = err_adv
        self.rx_setup = rx_setup
        self.tx_setup = tx_setup
        self.rx_isr = rx_isr
        self.tx_isr = tx_isr
        self.tx_chain = tx_chain

    def __repr__(self):
        return str(self.__dict__)
    
@dataclass
class ScanPktStats:
    def __init__(
        self,
        rx_adv: int,
        rx_adv_crc: int,
        rx_adv_timeout: int,
        rx_chain: int,
        rx_chain_crc: int,
        rx_chain_timeout: int,
        err_scan: int,
        rx_setup: int,
        tx_setup: int,
        rx_isr: int,
        tx_isr: int,
        tx_req: Optional[int] = None,
        rx_rsp: Optional[int] = None,
        rx_rsp_crc: Optional[int] = None,
        rx_rsp_timeout: Optional[int] = None
    ) -> None:
        self.rx_adv = rx_adv
        self.rx_adv_crc = rx_adv_crc
        self.rx_adv_timeout = rx_adv_timeout
        self.rx_chain = rx_chain
        self.rx_chain_crc = rx_chain_crc
        self.rx_chain_timeout = rx_chain_timeout
        self.err_scan = err_scan
        self.rx_setup = rx_setup
        self.tx_setup = tx_setup
        self.rx_isr = rx_isr
        self.tx_isr = tx_isr
        self.tx_req = tx_req
        self.rx_rsp = rx_rsp
        self.rx_rsp_crc = rx_rsp_crc
        self.rx_rsp_timeout = rx_rsp_timeout

    def __repr__(self):
        return str(self.__dict__)

@dataclass  
class MemPktStats:
    def __init__(
        self,
        stack: int,
        sys_assert_cnt: int,
        free_mem: int,
        used_mem: int,
        max_connections: int,
        conn_ctx_size: int,
        cs_watermark_lvl: int,
        ll_watermark_lvl: int,
        sch_watermark_lvl: int,
        lhci_watermark_lvl: int,
        max_adv_sets: int,
        ext_init_ctx_size: int,
        max_num_ext_init: int,
        max_per_scanners: int,
        per_scan_ctx_size: int,
        max_cig: int,
        cig_ctx_size: int,
        cis_ctx_size: int
    ) -> None:
        self.stack = stack
        self.sys_assert_cnt = sys_assert_cnt
        self.free_mem = free_mem
        self.used_mem = used_mem
        self.max_connections = max_connections
        self.conn_ctx_size = conn_ctx_size
        self.cs_watermark_lvl = cs_watermark_lvl
        self.ll_watermark_lvl = ll_watermark_lvl
        self.sch_watermark_lvl = sch_watermark_lvl
        self.lhci_watermark_lvl = lhci_watermark_lvl
        self.max_adv_sets = max_adv_sets
        self.ext_init_ctx_size = ext_init_ctx_size
        self.max_num_ext_init = max_num_ext_init
        self.max_per_scanners = max_per_scanners
        self.per_scan_ctx_size = per_scan_ctx_size
        self.max_cig = max_cig
        self.cig_ctx_size = cig_ctx_size
        self.cis_ctx_size = cis_ctx_size

    def __repr__(self):
        return str(self.__dict__)
    
@dataclass
class PduPktStats:
    def __init__(
        self,
        fail_pdu: int,
        pass_pdu: int,
        fail_whitelist: int,
        pass_whitelist: int,
        fail_peer_addr_match: int,
        pass_peer_addr_match: int,
        fail_local_addr_match: int,
        pass_local_addr_match: int,
        fail_peer_rpa_verify: int,
        pass_peer_rpa_verify: int,
        fail_peer_priv_addr: int,
        pass_peer_priv_addr: int,
        fail_local_priv_addr: int,
        pass_local_priv_addr: int,
        fail_peer_addr_res_req: int,
        pass_peer_addr_res_req: int,
        pass_local_addr_res_opt: int,
        peer_res_addr_pend: int,
        local_res_addr_pend: int,
    ) -> None:
        self.fail_pdu = fail_pdu
        self.pass_pdu = pass_pdu
        self.fail_whitelist = fail_whitelist
        self.pass_whitelist = pass_whitelist
        self.fail_peer_addr_match = fail_peer_addr_match
        self.pass_peer_addr_match = pass_peer_addr_match
        self.fail_local_addr_match = fail_local_addr_match
        self.pass_local_addr_match = pass_local_addr_match
        self.fail_peer_rpa_verify = fail_peer_rpa_verify
        self.pass_peer_rpa_verify = pass_peer_rpa_verify
        self.fail_peer_priv_addr = fail_peer_priv_addr
        self.pass_peer_priv_addr = pass_peer_priv_addr
        self.fail_local_priv_addr = fail_local_priv_addr
        self.pass_local_priv_addr = pass_local_priv_addr
        self.fail_peer_addr_res_req = fail_peer_addr_res_req
        self.pass_peer_addr_res_req = pass_peer_addr_res_req
        self.pass_local_addr_res_opt = pass_local_addr_res_opt
        self.peer_res_addr_pend = peer_res_addr_pend
        self.local_res_addr_pend = local_res_addr_pend

    def __repr__(self):
        return str(self.__dict__)
    
class TestReport:
    def __init__(
        self,
        rx_pkt_count: int,
        rx_oct_count: int,
        gen_pkt_count: int,
        gen_oct_count: int
    ) -> None:
        self.rx_pkt_count = rx_pkt_count
        self.rx_oct_count = rx_oct_count
        self.gen_pkt_count = gen_pkt_count
        self.gen_oct_count = gen_oct_count

    def __repr__(self):
        return str(self.__dict__)
    
class PoolStats:
    def __init__(
        self,
        buf_size: int,
        num_buf: int,
        num_alloc: int,
        max_alloc: int,
        max_req_len: int
    ) -> None:
        self.buf_size = buf_size
        self.num_buf = num_buf
        self.num_alloc = num_alloc
        self.max_alloc = max_alloc
        self.max_req_len = max_req_len

    def __repr__(self):
        return str(self.__dict__)
